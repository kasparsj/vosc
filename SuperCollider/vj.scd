//m = ServerMeter.new(s, 2, 2);
m = ServerMeter.new(s, 1, 2);

(
~visuals = NetAddr("127.0.0.1", 33333);
~fakeDirtPlay = false;
~synths = [];
~file = nil;
// ~file = "/Users/kasparsj/Music/ivars/tema1.wav";
// ~file = "/Users/kasparsj/Music/ivars/tema1_2.wav";
// ~file = "/Users/kasparsj/Music/ivars/tema1_1.wav";
// ~file = "/Users/kasparsj/Music/SuperCollider Recordings/SC_220411_163046.wav";
if (~file.isNil, {
	~numChannels = 1;
}, {
	~buffers = [];
	Buffer.read(s, ~file, action: { |buffer|
		~numChannels = buffer.numChannels;
		~numChannels.do { |i|
			~buffers = ~buffers.add(Buffer.readChannel(s, ~file, channels: [i]));
		};
	});
});
)
(
SynthDef(\soundin, {|out=0, in=0, rate=60|
	var input, amp, chain, onset, loudness, mfcc, trig;
    input = SoundIn.ar(in);
	chain = FFT(LocalBuf(1024), input);
	onset = Onsets.kr(chain);
	amp = Amplitude.kr(input);
    loudness = Loudness.kr(chain);
	mfcc = MFCC.kr(chain);
    trig = Impulse.kr(rate);
    SendReply.kr(trig, '/visuals', [in, onset, amp, loudness] ++ mfcc);
//	Out.ar(out, input);
}).add;

SynthDef(\buf, {|out=0, in=0, rate=60, bufnum|
	var input, amp, chain, onset, loudness, mfcc, trig;
	input = PlayBuf.ar(1, bufnum, BufRateScale.kr(bufnum), loop: 1);
	chain = FFT(LocalBuf(1024), input);
	onset = Onsets.kr(chain);
	amp = Amplitude.kr(input);
    loudness = Loudness.kr(chain);
	mfcc = MFCC.kr(chain);
    trig = Impulse.kr(rate);
    SendReply.kr(trig, '/visuals', [in, onset, amp, loudness] ++ mfcc);
	Out.ar(out, Splay.ar(input));
}).add;
)

(
OSCdef(\visuals_sender, {|msg|
    var data = msg[3..];
	var in = data[0];
	var onset = data[1];
	var amp = data[2];
	var loudness = data[3];
	var mfcc = data[4..];
	~visuals.sendMsg('/sound/data', in, amp, loudness, onset.asInteger, *mfcc);
	if (~fakeDirtPlay and: {onset == 1}, {
		~visuals.sendMsg('/dirt/play', \s, "ch"++in, \amp, amp, \loudness, loudness);
	});
}, '/visuals');
)

(
var synthName = if (~file.isNil, { \soundin }, { \buf });
~numChannels.do {|i|
	var bufnum = if (~file.isNil, { nil }, { ~buffers[i].bufnum; });
	~synths = ~synths.add(Synth(synthName, [in: i, rate: 120, bufnum: bufnum]));
};
)

(
~synths.do { |synth|
	synth.free;
}
)

~visuals.sendMsg('/sounds', 1);
~visuals.sendMsg('/layers', 9);

~visuals.sendMsg('/thresh', "*", 0.35);
~visuals.sendMsg('/loud/max', "*", 32);
~visuals.sendMsg('/amp/max', "*", 0.1);

~visuals.sendMsg('/speed', "*", 0.1);
~visuals.sendMsg('/choose', "*", "shader");
~visuals.sendMsg('/reload', "*");
~visuals.sendMsg('/unload', "*");
~visuals.sendMsg('/noclear', "*", true);
~visuals.sendMsg('/tex', 0, "color.frag");
~visuals.sendMsg('/tex', 0, "shader:100fragments/OscCircle");
~visuals.sendMsg('/tex', 0, "NoisySpirals");
~visuals.sendMsg('/tex', 0, "black_hole.jpg");
~visuals.sendMsg('/tex', 0, "/Users/kasparsj/Desktop/Screenshot\ 2022-11-06\ at\ 02.57.56.png");
~visuals.sendMsg('/tex', 0, "http://1.bp.blogspot.com/-8PQ_NKjf5MI/UK_iuF92QUI/AAAAAAAAAYI/GV0NCn74Ly0/s1600/oh-happy-day.jpg");
~visuals.sendMsg('/pos', "*", 0, 0);
~visuals.sendMsg('/size', "*", 100, 100);
~visuals.sendMsg('/scale', 0, 1);
~visuals.sendMsg('/data', "*", "amp");
~visuals.sendMsg('/data', "*", "loud");
~visuals.sendMsg('/tint', "*", 256.rand, 256.rand, 256.rand);
~visuals.sendMsg('/tex', "*", "");
~visuals.sendMsg('/tex/unload', "*");
~visuals.sendMsg('/tex/choose', 0, "shader");
~visuals.sendMsg('/seek', "*", "rand");
~visuals.sendMsg('/reset', "*");

~visuals.sendMsg('/tint', 0, 0.15, 0.75, 1.0); // blue
~visuals.sendMsg('/tint', 0, 1.0, 0.45, 0); // orange
~visuals.sendMsg('/tint', 0, 0.4615, 0.615, 1.0); // blue2
~visuals.sendMsg('/tint', 0, 1.0, 1.0, 0.25); // yellow
~visuals.sendMsg('/tint', 0, 0, 0, 0); // black
~visuals.sendMsg('/tint', 0, 1.0, 1.0, 1.0); // white
~visuals.sendMsg('/tint', 1, 0, 0, 0); // white
~visuals.sendMsg('/tint', 0, 1.0, 0, 0); // red
~visuals.sendMsg('/tint', 0, 256.rand, 256.rand, 256.rand); // random
~visuals.sendMsg('/tint', 0, "rand"); // random

~visuals.sendMsg('/cam', true);
~visuals.sendMsg('/cam/pos', 0, 0, -100);

//~visuals.sendMsg('/onset/force'); // force onset
//~visuals.sendMsg('/onset', false); // toggle onset
~visuals.sendMsg('/data', 0, "const");
~visuals.sendMsg('/data', 0, "rand");
~visuals.sendMsg('/data', 0, "noise");
~visuals.sendMsg('/data', 1, "noise");
~visuals.sendMsg('/data', "*", "loud:0");
~visuals.sendMsg('/tex', 0, "shadertoy/AtmoScattering.frag");
~visuals.sendMsg('/tex', 0, "WaveClock");
~visuals.sendMsg('/tex', 1, "NoisySpirals");
~visuals.sendMsg('/reset', 0);

~visuals.sendMsg('/tex', 0, "webcam:0");
~visuals.sendMsg('/looper', 0, 2, 60, 2.0);
~visuals.sendMsg('/size', 0, 100, 150);
~visuals.sendMsg('/size', 0, -100, -150);
~visuals.sendMsg('/scale', 0, -1);
~visuals.sendMsg('/align', 0, "center");
~visuals.sendMsg('/align', 0, "right", "bottom");
~visuals.sendMsg('/rot', 0, 0, 0, 90);
~visuals.sendMsg('/rot/point', 0, 0.5, 0.5);

(
~visuals.sendMsg('/data', 0, "sin");
~visuals.sendMsg('/thresh', 0, 0);
~visuals.sendMsg('/thresh/onset', 0, 0.9);
// ~visuals.sendMsg('/tex', 0, "DSC_0081.mov");
~visuals.sendMsg('/tex', 0, "bbb_export.hpv");
)

/// PERFORMANCE

~visuals.sendMsg('/clear', 0);
~visuals.sendMsg('/clear', 1);

(
~visuals.sendMsg('/loud/max', "*", 28);
~visuals.sendMsg('/amp/max', "*", 0.1);
~visuals.sendMsg('/thresh', 0, 0);
~visuals.sendMsg('/data', 0, "loud:0");
//~visuals.sendMsg('/data', 0, "rand");
~visuals.sendMsg('/tex', 0, "NoisySpirals");
~visuals.sendMsg('/alpha', 0, 1);
~visuals.sendMsg('/bri', 0, 1.0);
~visuals.sendMsg('/tint', 0, "mfcc", false);
)

~visuals.sendMsg('/tint', 0, 0.15, 0.75, 1.0); // blue
~visuals.sendMsg('/tint', 0, 1.0, 0.45, 0); // orange
~visuals.sendMsg('/tint', 0, 0.4615, 0.615, 1.0); // blue2
~visuals.sendMsg('/tint', 0, 1.0, 1.0, 0.25); // yellow
~visuals.sendMsg('/tint', 0, 0, 0, 0); // black
~visuals.sendMsg('/tint', 0, 1.0, 1.0, 1.0); // white
~visuals.sendMsg('/tint', 0, 0, 0, 0); // white
~visuals.sendMsg('/tint', 0, 1.0, 0, 0); // red
~visuals.sendMsg('/tint', 0, 256.rand, 256.rand, 256.rand); // random
~visuals.sendMsg('/tint', 0, "rand"); // random

(
~visuals.sendMsg('/loud/max', "*", 24);
//~visuals.sendMsg('/data', 1, "loud:0");
~visuals.sendMsg('/data', 1, "noise");
~visuals.sendMsg('/thresh', 1, 0);
~visuals.sendMsg('/tex', 1, "WaveClock");
~visuals.sendMsg('/alpha', 1, 1.0);
~visuals.sendMsg('/bri', 1, 1.0);
~visuals.sendMsg('/tint', 4, "mfcc", true);
)

~visuals.sendMsg('/speed', "*", 1);

~visuals.sendMsg('/data', 0, "loud:0");
~visuals.sendMsg('/alpha', 0, 1.0);
~visuals.sendMsg('/bri', 0, 0);
~visuals.sendMsg('/tint', 0, 1.0, 1.0, 1.0);

~visuals.sendMsg('/alpha', 2, 1.0);
~visuals.sendMsg('/bri', 2, 1.0);

(
//var secs = 60;
var secs = 10;
~visuals.sendMsg('/thresh', 2, 0.7);
~visuals.sendMsg('/data', 2, "rand");
~visuals.sendMsg('/tex', 2, "OscCircle.frag");
~visuals.sendMsg('/tint', 2, 1.0, 1.0, 1.0);
~visuals.sendMsg('/alpha', 2, 0);
~visuals.sendMsg('/alpha', 2, 1.0, secs);
~visuals.sendMsg('/bri', 0, 0, secs);
~visuals.sendMsg('/bri', 1, 0, secs);
{
	secs.wait;
	"bri fade done".postln;
	~visuals.sendMsg('/thresh', "*", 0.1);
}.fork;
)

~visuals.sendMsg('/tex', 2, "box");
~visuals.sendMsg('/tex', 2, "cylinder");
~visuals.sendMsg('/tex', 2, "cone");
~visuals.sendMsg('/rot', 2, 360, 1);
~visuals.sendMsg('/rot/speed', 2, 1);
~visuals.sendMsg('/scale', 2, 0.2, 0.2, 0.2, 1);

(
var secs = 30;
~visuals.sendMsg('/thresh', "*", 0.8);
~visuals.sendMsg('/alpha', 0, 0, secs);
~visuals.sendMsg('/alpha', 1, 0, secs);
~visuals.sendMsg('/tint', 2, 0.15, 0.75, 1.0, secs); // lerp to blue
{
	secs.wait;
	//~visuals.sendMsg('/tint', 0, 0, 0, 0);
	~visuals.sendMsg('/tex', 0, "");
	~visuals.sendMsg('/tex', 1, "");
	"colorlerp+alpha done".postln;
}.fork;
)

(
var secs = 30;
// ~visuals.sendMsg('/tint', 2, 1.0, 0.45, 0, secs); // orange
// ~visuals.sendMsg('/tint', 2, 0.4615, 0.615, 1.0, secs); // blue2
~visuals.sendMsg('/tint', 2, 1.0, 1.0, 0.25, secs); // yellow
{
	secs.wait;
	"colorlerp done".postln;
}.fork;
)

(
var secs = 10;
//~visuals.sendMsg('/thresh', "*", 0);
~visuals.sendMsg('/tint', 1, 1.0, 1.0, 1.0);
~visuals.sendMsg('/data', 1, "const");
~visuals.sendMsg('/thresh', 1, 0);
~visuals.sendMsg('/tex', 1, "Spiral");
~visuals.sendMsg('/bri', 1, 1.0);
~visuals.sendMsg('/alpha', 1, 1.0, secs);
{
	secs.wait;
	"spiral fade done".postln;
}.fork;
)



(
var secs = 60;
~visuals.sendMsg('/thresh', 2, 0.2);
~visuals.sendMsg('/data', 2, "loud:0");
~visuals.sendMsg('/tex', 2, "");
~visuals.sendMsg('/alpha', 2, 1.0, secs);
~visuals.sendMsg('/alpha', 0, 0, secs);
~visuals.sendMsg('/alpha', 1, 0, secs);
{
	secs.wait;
	~visuals.sendMsg('/tex', 1, "");
	~visuals.sendMsg('/tex', 0, "");
	~visuals.sendMsg('/data', 3, "loud:0");
	~visuals.sendMsg('/tex', 3, "");
	~visuals.sendMsg('/tint', 3, "mfcc", true);
	~visuals.sendMsg('/data', 4, "loud:0");
	~visuals.sendMsg('/tex', 4, "");
	~visuals.sendMsg('/thresh', "*", 0.8);
}.fork;
)

(
~visuals.sendMsg('/tint', 3, "mfcc", false);
~visuals.sendMsg('/tint', 3, "rand", true);
)

~visuals.sendMsg('/data', 2, "loud:1");
~visuals.sendMsg('/data', 3, "loud:0");
~visuals.sendMsg('/tex', 2, "02.frag");
~visuals.sendMsg('/tex', 2, "04.frag");
~visuals.sendMsg('/tex', 2, "RotStringsH.frag");
~visuals.sendMsg('/alpha', 3, 1.0);
~visuals.sendMsg('/tex', 3, "");
~visuals.sendMsg('/tint', 2, "mfcc", false);
~visuals.sendMsg('/alpha', 2, 1.0);
~visuals.sendMsg('/alpha', 4, 1.0);

(
var secs = 10;
~visuals.sendMsg('/alpha', 2, 0);
~visuals.sendMsg('/alpha', 3, 0);
~visuals.sendMsg('/alpha', 4, 0);
{
	secs.wait;
	"fade out done".postln;
}.fork;
)

(
~visuals.sendMsg('/data', 0, "rand");
~visuals.sendMsg('/data', 1, "const");
~visuals.sendMsg('/data', 2, "const");
~visuals.sendMsg('/data', 3, "rand");
~visuals.sendMsg('/data', 4, "rand");
)

(
~visuals.sendMsg('/tex', 0, "Empty.frag");
~visuals.sendMsg('/tex', 1, "TerrainGrid.frag");
~visuals.sendMsg('/tint', 0, "rand");
~visuals.sendMsg('/thresh', 0, 0.9);
~visuals.sendMsg('/thresh/onset', 0, 0.9);
~visuals.sendMsg('/post', "invert");
)

(
9.do { |i|
	~visuals.sendMsg('/data', i, "noise");
	~visuals.sendMsg('/thresh', i, 0);
	~visuals.sendMsg('/tex', i, "WaveClock");
};
~visuals.sendMsg('/layout', 3, *(0..8));
)

// introduction about vjing
// why use OSC
// strategies
// shaders
// 3d / sketches with memory
// distorting shapes
// practical jamming

~visuals.sendMsg('/cam', 1);
~visuals.sendMsg('/cam/pos', 0, 0, -3000, 10);

~visuals.sendMsg('/tex', 0, "0xff0000"); // load red color into first layer